<?php

namespace ObservationBundle\Repository;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{
	public function findAllValidated()
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.publish = :publish')
				->setParameter('publish', true)
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
			->orderBy('obs.day', 'DESC');
		return $queryBuilder->getQuery()->getResult();
	}

	public function getNeedValidation()
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.validation IS NULL')
			->andWhere('obs.publish = :publish')
				->setParameter('publish', true)
			->orderBy('obs.day', 'DESC');
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUser($user)
	{
		$queryBuilder = $this->findAllUserQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserValidatedQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->andWhere('obs.publish = :publish')
				->setParameter('publish', true)
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUserValidated($user)
	{
		$queryBuilder = $this->findAllUserValidatedQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserSavedQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->andWhere('obs.publish = :publish')
				->setParameter('publish', false)
			->andWhere('obs.validation IS NULL')
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUserSaved($user)
	{
		$queryBuilder = $this->findAllUserSavedQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserRejectedQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->leftJoin('obs.validation', 'val')
			->andWhere('val.rejected = :rejected')
				->setParameter('rejected', true)
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUserRejected($user)
	{
		$queryBuilder = $this->findAllUserRejectedQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

    public function getObservationsFromDate(\DateTime $date){
        $qb = $this->_em->createQueryBuilder();
        $date->modify('first day of this month');

        $qb->select('count(o.id)')
            ->from('ObservationBundle:Observation', 'o')
            ->where('o.sendingDate < :date')
            ->setParameter('date', $date);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countUserValidated($user)
    {
    	$queryBuilder = $this->findAllUserValidatedQuery($user);
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countUserSaved($user)
    {
    	$queryBuilder = $this->findAllUserSavedQuery($user);
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countUserRejected($user)
    {
    	$queryBuilder = $this->findAllUserRejectedQuery($user);
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countValidated()
    {
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.publish = :publish')
				->setParameter('publish', true)
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
			->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countForUser($user)
    {
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.author = :user')
				->setParameter('user', $user)
			->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function searchFilteredQuery($search)
    {
		$queryBuilder = $this->createQueryBuilder('obs');

		$queryBuilder
			->where('obs.publish = :publish')
				->setParameter('publish', true)
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
		;

		if ($search->hasTaxonFilter())
		{
			$queryBuilder
				->leftJoin('obs.taxon', 'tax')
			;
		}

		if (!empty($search->getBirdName()))
		{
			$queryBuilder
				->andWhere('tax.nameVern = :nameVern')
				->setParameter('nameVern', $search->getBirdName())
			;
		}

		if (!empty($search->getBirdFamily()))
		{
			$queryBuilder
				->andWhere('tax.family = :family')
				->setParameter('family', $search->getBirdFamily())
			;
		}

		if (!empty($search->getBirdOrder()))
		{
			$queryBuilder
				->andWhere('tax.order = :order')
				->setParameter('order', $search->getBirdOrder())
			;
		}

		if (!empty($search->getObsAuthor()))
		{
			$queryBuilder
				->leftJoin('obs.author', 'user')
				->andWhere('user.username = :author')
				->setParameter('author', $search->getObsAuthor())
			;
		}

		// if (!empty($search->getObsDate()))
		// {
		// 	$queryBuilder
		// 		->andWhere('obs.day = :day')
		// 		->setParameter('day', $search->getObsDate())
		// 	;
		// }

		if ($search->getObsWithImage())
		{
			$queryBuilder
				->andWhere('obs.image IS NOT NULL')
			;
		}

		if (!empty($search->getObsLocation()))
		{
			$queryBuilder
				->andWhere('obs.locLocality LIKE :location OR obs.locCounty LIKE :location OR obs.locRegion LIKE :location OR obs.locPostalCode LIKE :location OR obs.locPostalCode LIKE :countyCode')
				->setParameter('location', $search->getObsLocation())
				->setParameter('countyCode', substr($search->getObsLocation(), 0, 2) .'%')
			;
		}

		return $queryBuilder;
    }


	public function searchFiltered($search)
	{
		$queryBuilder = $this->searchFilteredQuery($search);
		return $queryBuilder->getQuery()->getResult();
	}

}