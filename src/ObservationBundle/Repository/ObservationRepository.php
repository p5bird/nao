<?php

namespace ObservationBundle\Repository;

/**
 * ObservationRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ObservationRepository extends \Doctrine\ORM\EntityRepository
{
	public function findAllValidatedQuery()
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.publish = :publish')
				->setParameter('publish', true)
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
			;
		return $queryBuilder;
	}

	public function findAllValidated(){
		$queryBuilder = $this->findAllValidatedQuery();

		$queryBuilder->orderBy('obs.day', 'DESC');
		
		return $queryBuilder->getQuery()->getResult();		
	}

	public function getNeedValidationQuery()
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.validation IS NULL')
			->andWhere('obs.publish = :publish')
				->setParameter('publish', true)
			->orderBy('obs.updatedAt', 'ASC');
		return $queryBuilder;
	}

	public function getNeedValidation()
	{
		$queryBuilder = $this->getNeedValidationQuery();
		return $queryBuilder->getQuery()->getResult();
	}

	public function countNeedValidation()
	{
		$queryBuilder = $this->getNeedValidationQuery();
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
	}

	public function findAllUserQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->addOrderBy('obs.publish')
			->addOrderBy('obs.day', 'DESC')
			;
		return $queryBuilder;
	}

	public function findAllUser($user)
	{
		$queryBuilder = $this->findAllUserQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserValidatedQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->andWhere('obs.publish = :publish')
				->setParameter('publish', true)
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUserValidated($user)
	{
		$queryBuilder = $this->findAllUserValidatedQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserSavedQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->andWhere('obs.publish = :publish')
				->setParameter('publish', false)
			->leftJoin('obs.validation', 'val')
			->andWhere('obs.validation IS NULL OR val.granted = :false')
				->setParameter('false', false)
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUserSaved($user)
	{
		$queryBuilder = $this->findAllUserSavedQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserNeedValidationQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->andWhere('obs.publish = :publish')
				->setParameter('publish', true)
			->andWhere('obs.validation IS NULL')
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUserNeedValidation($user)
	{
		$queryBuilder = $this->findAllUserNeedValidationQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

	public function findAllUserRejectedQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->leftJoin('obs.validation', 'val')
			->andWhere('val.rejected = :rejected')
				->setParameter('rejected', true)
			->orderBy('obs.day', 'DESC');
		return $queryBuilder;
	}

	public function findAllUserRejected($user)
	{
		$queryBuilder = $this->findAllUserRejectedQuery($user);
		return $queryBuilder->getQuery()->getResult();
	}

    public function getObservationsFromDate(\DateTime $date){
        $qb = $this->_em->createQueryBuilder();
        $date->modify('first day of this month');

        $qb->select('count(o.id)')
            ->from('ObservationBundle:Observation', 'o')
            ->where('o.sendingDate < :date')
            ->setParameter('date', $date);

        return $qb->getQuery()->getSingleScalarResult();
    }

    public function countUserValidated($user)
    {
    	$queryBuilder = $this->findAllUserValidatedQuery($user);
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countUserSaved($user)
    {
    	$queryBuilder = $this->findAllUserSavedQuery($user);
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countUserNeedValidation($user)
    {
    	$queryBuilder = $this->findAllUserNeedValidationQuery($user);
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countUserRejected($user)
    {
    	$queryBuilder = $this->findAllUserRejectedQuery($user);
		$queryBuilder->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countValidated()
    {
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.publish = :publish')
				->setParameter('publish', true)
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
			->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function countForUser($user)
    {
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->where('obs.author = :user')
				->setParameter('user', $user)
			->select('count(obs)');
		return $queryBuilder->getQuery()->getSingleScalarResult();
    }

    public function searchFilteredQuery($search)
    {
		$queryBuilder = $this->createQueryBuilder('obs');

		$queryBuilder
			->where('obs.validation IS NOT NULL')
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :granted')
				->setParameter('granted', true)
		;

		if ($search->hasTaxonFilter())
		{
			$queryBuilder
				->leftJoin('obs.taxon', 'tax')
			;
		}

		if (!empty($search->getBirdName()))
		{
			$queryBuilder
				->andWhere('tax.nameVern LIKE :birdName OR obs.birdName LIKE :birdName OR tax.name LIKE :birdName')
					->setParameter('birdName', "%".$search->getBirdName()."%")
			;
		}

		if (!empty($search->getBirdFamily()))
		{
			$queryBuilder
				->andWhere('tax.family = :family')
				->setParameter('family', $search->getBirdFamily())
			;
		}

		if (!empty($search->getBirdOrder()))
		{
			$queryBuilder
				->andWhere('tax.order = :order')
				->setParameter('order', $search->getBirdOrder())
			;
		}

		if ($search->hasDescriptionFilter())
		{
			$queryBuilder
				->leftJoin('obs.description', 'des')
			;
		}

		if (!empty($search->getBirdSize()))
		{
			$queryBuilder
				->andWhere('des.size = :size')
				->setParameter('size', $search->getBirdSize())
			;
		}

		if (!empty($search->getBirdColor()))
		{

			$colors = $search->explodeString($search->getBirdcolor());
			$colorQuery = "";
			foreach ($colors as $color)
			{
				// this comment below allow to find bird whithout every colors required
				// The active query after found bird having every colors required
				// $queryBuilder
				// 	->andWhere('des.plumageColor LIKE :color OR des.bareColor LIKE :color OR des.pawsColor LIKE :color OR des.beakColor LIKE :color')
				// 	->setParameter('color', "%".$color."%")
				// ;
				if (!empty($colorQuery))
				{
					$colorQuery .= " AND ";
				}
				$colorQuery .= "(des.plumageColor LIKE '%${color}%' OR des.bareColor LIKE '%${color}%' OR des.pawsColor LIKE '%${color}%' OR des.beakColor LIKE '%${color}%')";
			}
				$queryBuilder
					->andWhere($colorQuery)
				;
		}

		if (!empty($search->getObsAuthor()))
		{
			$queryBuilder
				->leftJoin('obs.author', 'user')
				->andWhere('user.username LIKE :author')
				->setParameter('author', $search->getObsAuthor())
			;
		}

		if (!empty($search->getObsDate()))
		{
			$dateFrom = new \DateTime($search->getObsDate()->format("Y-m-d")." 00:00:00");
			$dateTo = new \DateTime($search->getObsDate()->format("Y-m-d")." 23:59:59");
			$queryBuilder
				->andWhere('obs.day BETWEEN :from AND :to')
				->setParameter('from', $dateFrom)				
				->setParameter('to', $dateTo)				
			;
		}

		if ($search->getObsWithImage())
		{
			$queryBuilder
				->andWhere('obs.image IS NOT NULL')
			;
		}

		if (!empty($search->getObsLocation()))
		{
			$queryBuilder
				->andWhere('obs.locLocality LIKE :locGoogle OR obs.locCounty LIKE :locGoogle OR obs.locRegion LIKE :locGoogle OR obs.locPostalCode LIKE :location OR obs.locPostalCode LIKE :countyCode OR obs.place LIKE :location')
				->setParameter('location', "%".$search->getObsLocation()."%")
				->setParameter('countyCode', substr($search->getObsLocation(), 0, 2) .'%')
				->setParameter('locGoogle', "%".$search->getObsLocationGoogle()."%")
			;
		}

		return $queryBuilder;
    }


	public function searchFiltered($search)
	{
		$queryBuilder = $this->searchFilteredQuery($search);
		return $queryBuilder->getQuery()->getResult();
	}


	public function getForUserQuery($user)
	{
		$queryBuilder = $this->createQueryBuilder('obs');
		$queryBuilder
			->leftJoin('obs.author', 'user')
			->andWhere('user.id = :userId')
				->setParameter('userId', $user->getId())
			->leftJoin('obs.validation', 'val')
			->andWhere('val.granted = :true')
				->setParameter('true', true)
			;
		return $queryBuilder;
	}

	public function getForUser($user, $limit = 0)
	{
		$queryBuilder = $this->getForUserQuery($user);
		$queryBuilder->addOrderBy('obs.updatedAt', 'DESC');

		if ($limit > 0)
		{
			$queryBuilder->setMaxResults($limit);
		}
			
		return $queryBuilder->getQuery()->getResult();
	}

	public function getLastValidated($limit = 0)
	{
		$queryBuilder=$this->findAllValidatedQuery();
		$queryBuilder->addOrderBy('obs.updatedAt', 'DESC');

		if ($limit > 0)
		{
			$queryBuilder->setMaxResults($limit);
		}
			
		return $queryBuilder->getQuery()->getResult();
	}

	public function getLastThreeObservations()
	{
		return $this->getLastValidated(3);
	}

	public function getLastValidatedWithImage($limit = 0)
	{
		$queryBuilder=$this->findAllValidatedQuery();
		$queryBuilder
			->andWhere('obs.image IS NOT NULL')
			->addOrderBy('obs.updatedAt', 'DESC');

		if ($limit > 0)
		{
			$queryBuilder->setMaxResults($limit);
		}
			
		return $queryBuilder->getQuery()->getResult();
	}


}